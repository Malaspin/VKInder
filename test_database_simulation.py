#!/usr/bin/env python3
"""
–°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
–≠–º—É–ª–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
"""

import sys
import os
import time
import random
from datetime import datetime
from typing import List, Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from db_api import *


class DatabaseSimulator:
    """–°–∏–º—É–ª—è—Ç–æ—Ä —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–º—É–ª—è—Ç–æ—Ä–∞"""
        self.users = []
        self.simulation_running = False
        
    def start_simulation(self):
        """–ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏"""
        print("üöÄ –ó–ê–ü–£–°–ö –°–ò–ú–£–õ–Ø–¶–ò–ò –†–ê–ë–û–¢–´ –°–ò–°–¢–ï–ú–´")
        print("=" * 50)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        if not test_database():
            print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return False
        
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.create_test_users()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
        self.simulation_running = True
        self.run_simulation()
        
        return True
    
    def create_test_users(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        print("\nüë• –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        
        test_users = [
            {"vk_user_id": 1001, "first_name": "–ê–Ω–Ω–∞", "last_name": "–ò–≤–∞–Ω–æ–≤–∞", "age": 25, "sex": 1, "city": "–ú–æ—Å–∫–≤–∞"},
            {"vk_user_id": 1002, "first_name": "–ü–µ—Ç—Ä", "last_name": "–ü–µ—Ç—Ä–æ–≤", "age": 30, "sex": 2, "city": "–°–ü–±"},
            {"vk_user_id": 1003, "first_name": "–ú–∞—Ä–∏—è", "last_name": "–°–∏–¥–æ—Ä–æ–≤–∞", "age": 28, "sex": 1, "city": "–ö–∞–∑–∞–Ω—å"},
            {"vk_user_id": 1004, "first_name": "–ê–ª–µ–∫—Å–µ–π", "last_name": "–ö–æ–∑–ª–æ–≤", "age": 32, "sex": 2, "city": "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫"},
            {"vk_user_id": 1005, "first_name": "–ï–ª–µ–Ω–∞", "last_name": "–ú–æ—Ä–æ–∑–æ–≤–∞", "age": 27, "sex": 1, "city": "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥"}
        ]
        
        for user_data in test_users:
            if add_user(**user_data):
                self.users.append(user_data['vk_user_id'])
                print(f"  ‚úÖ {user_data['first_name']} {user_data['last_name']} –¥–æ–±–∞–≤–ª–µ–Ω")
            else:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è {user_data['first_name']}")
        
        print(f"üìä –°–æ–∑–¥–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(self.users)}")
    
    def run_simulation(self):
        """–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏–º—É–ª—è—Ü–∏–∏"""
        print("\nüé≠ –ù–∞—á–∞–ª–æ —Å–∏–º—É–ª—è—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã...")
        print("üí° –°–∏–º—É–ª—è—Ü–∏—è –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å 30 —Å–µ–∫—É–Ω–¥")
        print("‚èπÔ∏è  –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        
        start_time = time.time()
        cycle = 0
        
        try:
            while self.simulation_running and (time.time() - start_time) < 30:
                cycle += 1
                print(f"\nüîÑ –¶–∏–∫–ª {cycle}")
                
                # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
                self.simulate_user_activity()
                self.simulate_system_events()
                self.simulate_messages()
                self.simulate_favorites()
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
                time.sleep(2)
                
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è  –°–∏–º—É–ª—è—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        
        print(f"\n‚úÖ –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {cycle} —Ü–∏–∫–ª–æ–≤")
        self.show_simulation_results()
    
    def simulate_user_activity(self):
        """–°–∏–º—É–ª—è—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        if not self.users:
            return
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = random.choice(self.users)
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        actions = [
            "–∑–∞—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É",
            "–Ω–∞—á–∞–ª –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            "–ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª–∏",
            "–æ–±–Ω–æ–≤–∏–ª –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
            "–≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã"
        ]
        
        action = random.choice(actions)
        log_info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} {action}", user_id)
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ (10% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)
        if random.random() < 0.1:
            error_messages = [
                "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π",
                "–¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API",
                "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö",
                "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"
            ]
            error = random.choice(error_messages)
            log_error(f"{error} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}", user_id)
    
    def simulate_system_events(self):
        """–°–∏–º—É–ª—è—Ü–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π"""
        events = [
            "–°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞",
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î",
            "–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤",
            "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞",
            "–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"
        ]
        
        event = random.choice(events)
        log_info(event)
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –æ—à–∏–±–∫–∏ (5% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)
        if random.random() < 0.05:
            system_errors = [
                "–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏",
                "–ú–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –ë–î",
                "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π",
                "–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥"
            ]
            error = random.choice(system_errors)
            log_warning(error)
    
    def simulate_messages(self):
        """–°–∏–º—É–ª—è—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ —Å–∏—Å—Ç–µ–º–æ–π"""
        if not self.users:
            return
        
        user_id = random.choice(self.users)
        
        # –ö–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        commands = [
            "/start",
            "/help", 
            "/search",
            "/favorites",
            "/settings",
            "/profile"
        ]
        
        command = random.choice(commands)
        add_message(user_id, "command", command)
        
        # –û—Ç–≤–µ—Ç—ã —Å–∏—Å—Ç–µ–º—ã
        responses = {
            "/start": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É!",
            "/help": "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /start, /search, /favorites",
            "/search": "–ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...",
            "/favorites": "–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:",
            "/settings": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã:",
            "/profile": "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:"
        }
        
        response = responses.get(command, "–ö–æ–º–∞–Ω–¥–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
        add_message(user_id, "response", response)
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ (15% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)
        if random.random() < 0.15:
            error_messages = [
                "–û—à–∏–±–∫–∞: –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞",
                "–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤",
                "–û—à–∏–±–∫–∞: –≤—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å",
                "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö"
            ]
            error = random.choice(error_messages)
            add_message(user_id, "error", error)
    
    def simulate_favorites(self):
        """–°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–±—Ä–∞–Ω–Ω—ã–º"""
        if len(self.users) < 2:
            return
        
        # –í—ã–±–∏—Ä–∞–µ–º –¥–≤—É—Ö —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_id = random.choice(self.users)
        other_users = [u for u in self.users if u != user_id]
        favorite_id = random.choice(other_users)
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ (30% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)
        if random.random() < 0.3:
            if add_favorite(user_id, favorite_id):
                log_info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–∏–ª {favorite_id} –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", user_id)
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ (10% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)
        if random.random() < 0.1:
            favorites = get_favorites(user_id)
            if favorites:
                fav_to_remove = random.choice(favorites)['favorite_vk_id']
                if remove_favorite(user_id, fav_to_remove):
                    log_info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–∏–ª {fav_to_remove} –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ", user_id)
    
    def show_simulation_results(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–º—É–ª—è—Ü–∏–∏"""
        print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–ò–ú–£–õ–Ø–¶–ò–ò")
        print("=" * 50)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ë–î
        info = get_database_info()
        print(f"üìã –í—Å–µ–≥–æ —Ç–∞–±–ª–∏—Ü: {info.get('total_tables', 0)}")
        
        for table_name, table_info in info.get('tables', {}).items():
            print(f"  üìÑ {table_name}: {table_info['count']} –∑–∞–ø–∏—Å–µ–π")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–æ–≥–æ–≤
        print(f"\nüìù –õ–æ–≥–∏:")
        total_logs = sum(1 for table_info in info.get('tables', {}).values() 
                        if 'bot_logs' in str(table_info))
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏
        recent_logs = get_logs(limit=5)
        print(f"  üìä –í—Å–µ–≥–æ –ª–æ–≥–æ–≤: {len(recent_logs)}")
        print("  üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:")
        for log in recent_logs:
            user_info = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {log['vk_user_id']}" if log['vk_user_id'] != 0 else "–°–∏—Å—Ç–µ–º–∞"
            print(f"    [{log['log_level'].upper()}] {user_info}: {log['log_message']}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        print(f"\nüí¨ –°–æ–æ–±—â–µ–Ω–∏—è:")
        for user_id in self.users[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–ª—è –ø–µ—Ä–≤—ã—Ö 3 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            messages = get_user_messages(user_id, limit=3)
            print(f"  üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
        print(f"\n‚ù§Ô∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ:")
        for user_id in self.users[:3]:
            favorites = get_favorites(user_id)
            print(f"  üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: {len(favorites)} –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö")
        
        print(f"\n‚úÖ –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ë–ê–ó–´ –î–ê–ù–ù–´–• –° –°–ò–ú–£–õ–Ø–¶–ò–ï–ô")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º —Å–∏–º—É–ª—è—Ç–æ—Ä
    simulator = DatabaseSimulator()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
    success = simulator.start_simulation()
    
    if success:
        print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        print("üìñ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:")
        print("  - DATABASE_INTERFACE_GUIDE.md")
        print("  - DATABASE_COMMANDS_REFERENCE.md")
        print("  - database_examples.py")
    else:
        print("\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")


if __name__ == "__main__":
    main()
