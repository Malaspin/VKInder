#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö VKinder Bot
"""

import os
import sys
import glob
from datetime import datetime

def show_database_logs():
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ª–æ–≥–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    logs_dir = 'logs'
    
    if not os.path.exists(logs_dir):
        print("‚ùå –ü–∞–ø–∫–∞ logs –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–æ–≥–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
    print("=" * 40)
    
    # –ò—â–µ–º —Ñ–∞–π–ª—ã –ª–æ–≥–æ–≤ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
    log_patterns = [
        ('database_debug*.log', 'DEBUG', '–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö')
    ]
    
    for pattern, level, description in log_patterns:
        files = glob.glob(os.path.join(logs_dir, pattern))
        if files:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
            files.sort(key=os.path.getmtime, reverse=True)
            for filepath in files:
                filename = os.path.basename(filepath)
                size = os.path.getsize(filepath)
                mtime = datetime.fromtimestamp(os.path.getmtime(filepath))
                print(f"‚úÖ {filename} ({level}) - {size} –±–∞–π—Ç")
                print(f"   {description}")
                print(f"   –í—Ä–µ–º—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏: {mtime.strftime('%Y-%m-%d %H:%M:%S')}")
                print()
        else:
            print(f"‚ùå {pattern} ({level}) - —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            print()

def view_database_log_file(filename: str, lines: int = 50):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞ –ª–æ–≥–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    logs_dir = 'logs'
    
    # –ï—Å–ª–∏ filename —Å–æ–¥–µ—Ä–∂–∏—Ç *, –∏—â–µ–º –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
    if '*' in filename:
        files = glob.glob(os.path.join(logs_dir, filename))
        if not files:
            print(f"‚ùå –§–∞–π–ª—ã –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            return
        
        # –ë–µ—Ä–µ–º —Å–∞–º—ã–π –Ω–æ–≤—ã–π —Ñ–∞–π–ª
        files.sort(key=os.path.getmtime, reverse=True)
        filepath = files[0]
        actual_filename = os.path.basename(filepath)
        print(f"üìÑ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª: {actual_filename}")
    else:
        filepath = os.path.join(logs_dir, filename)
        if not os.path.exists(filepath):
            print(f"‚ùå –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
    
    print(f"üìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ {lines} —Å—Ç—Ä–æ–∫ –∏–∑ {filename}:")
    print("=" * 60)
    
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            all_lines = f.readlines()
            
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å—Ç—Ä–æ–∫
        start_line = max(0, len(all_lines) - lines)
        for line in all_lines[start_line:]:
            print(line.rstrip())
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")

def view_realtime_database_logs():
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    print("üîÑ –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ (Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞)")
    print("=" * 60)
    
    try:
        import subprocess
        
        # –ò—â–µ–º —Å–∞–º—ã–π –Ω–æ–≤—ã–π —Ñ–∞–π–ª database_debug —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
        log_files = glob.glob('logs/database_debug*.log')
        if log_files:
            log_files.sort(key=os.path.getmtime, reverse=True)
            log_file = log_files[0]
            print(f"üìÑ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º —Ñ–∞–π–ª: {os.path.basename(log_file)}")
            subprocess.run(['tail', '-f', log_file])
        else:
            print("‚ùå –§–∞–π–ª—ã –ª–æ–≥–æ–≤ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üìä VKinder Bot - –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 50)
    
    if len(sys.argv) > 1:
        command = sys.argv[1].lower()
        
        if command == 'debug':
            view_database_log_file('database_debug*.log', 50)
        elif command == 'follow':
            view_realtime_database_logs()
        else:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
            print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: debug, follow")
    else:
        show_database_logs()
        print("üí° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("   python view_logs.py debug   - –ø–æ–∫–∞–∑–∞—Ç—å DEBUG –ª–æ–≥–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        print("   python view_logs.py follow  - —Å–ª–µ–¥–∏—Ç—å –∑–∞ –ª–æ–≥–∞–º–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")

if __name__ == "__main__":
    main()