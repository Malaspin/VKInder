#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞
"""

import os
import re
import subprocess

def check_gitignore():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ .gitignore –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ .gitignore...")
    
    required_patterns = [
        '.env',
        'user_token.txt',
        'logs/',
        '*.token',
        '*.key',
        'secrets.json',
        'credentials.json'
    ]
    
    try:
        with open('.gitignore', 'r', encoding='utf-8') as f:
            gitignore_content = f.read()
        
        missing_patterns = []
        for pattern in required_patterns:
            if pattern not in gitignore_content:
                missing_patterns.append(pattern)
        
        if missing_patterns:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ .gitignore: {missing_patterns}")
            return False
        else:
            print("‚úÖ .gitignore —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è")
            return True
            
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª .gitignore –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False

def check_tokens_in_code():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –≤ –∫–æ–¥–µ"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–æ–≤...")
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
    token_patterns = [
        r'vk1\.a\.[A-Za-z0-9_-]{40,}',  # VK —Ç–æ–∫–µ–Ω—ã (–º–∏–Ω–∏–º—É–º 40 —Å–∏–º–≤–æ–ª–æ–≤)
        r'[A-Za-z0-9]{50,}',            # –û—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ (–≤–æ–∑–º–æ–∂–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã)
        r'[A-Za-z0-9]{40,}',            # –î–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
    ]
    
    # –§–∞–π–ª—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    files_to_check = [
        'src/bot/vk_bot.py',
        'src/config/setup_env.py',
        'src/token/setup_user_token.py',
        'src/token/get_token_manual.py',
        'main.py'
    ]
    
    found_tokens = []
    
    for filename in files_to_check:
        if os.path.exists(filename):
            try:
                with open(filename, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                for pattern in token_patterns:
                    matches = re.findall(pattern, content)
                    for match in matches:
                        # –ò—Å–∫–ª—é—á–∞–µ–º placeholder –∑–Ω–∞—á–µ–Ω–∏—è –∏ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–ª–∞—Å—Å—ã
                        exclude_patterns = [
                            'your_', 'placeholder', 'example', 'here',
                            'botdatabaseintegration', 'databaseinterface', 
                            'postgresqlmanager', 'vkinderbot', 'botsettings',
                            'tokenmanager', 'vkbotlongpoll', 'vkkeyboard',
                            'vkkeyboardcolor', 'vkboteventtype'
                        ]
                        if not any(pattern in match.lower() for pattern in exclude_patterns):
                            found_tokens.append((filename, match))
                            
            except Exception as e:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ {filename}: {e}")
    
    if found_tokens:
        print("‚ùå –ù–∞–π–¥–µ–Ω—ã –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –≤ –∫–æ–¥–µ:")
        for filename, token in found_tokens:
            print(f"   {filename}: {token[:20]}...")
        return False
    else:
        print("‚úÖ –¢–æ–∫–µ–Ω—ã –≤ –∫–æ–¥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return True

def check_git_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Git –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Git...")
    
    try:
        result = subprocess.run(['git', 'status', '--porcelain'], 
                              capture_output=True, text=True, check=True)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ staging area
        secret_files = ['.env', 'user_token.txt', 'logs/', '*.token', '*.key']
        
        for line in result.stdout.split('\n'):
            if line.strip():
                for secret_file in secret_files:
                    if secret_file in line:
                        print(f"‚ùå –°–µ–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∞–π–ª –≤ Git: {line.strip()}")
                        return False
        
        print("‚úÖ –°–µ–∫—Ä–µ—Ç–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ Git")
        return True
        
    except subprocess.CalledProcessError as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Git: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    print("üõ°Ô∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ VKinder Bot")
    print("=" * 50)
    
    checks = [
        check_gitignore,
        check_tokens_in_code,
        check_git_status
    ]
    
    passed = 0
    total = len(checks)
    
    for check in checks:
        if check():
            passed += 1
        print()
    
    print("=" * 50)
    if passed == total:
        print("üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!")
        print("‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –±–µ–∑–æ–ø–∞—Å–µ–Ω –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
    else:
        print(f"‚ö†Ô∏è  –ü—Ä–æ–π–¥–µ–Ω–æ {passed}/{total} –ø—Ä–æ–≤–µ—Ä–æ–∫")
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
    
    return passed == total

if __name__ == "__main__":
    main()
