#!/usr/bin/env python3
"""
–ú–µ–Ω–µ–¥–∂–µ—Ä PostgreSQL –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∑–∞–ø—É—Å–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å PostgreSQL –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –µ–≥–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
"""

import os
import sys
import subprocess
import time
import platform
import psycopg2
from typing import Optional, Dict, Any
from loguru import logger


class PostgreSQLManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è PostgreSQL"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ PostgreSQL"""
        self.host = os.getenv('DB_HOST', 'localhost')
        self.port = int(os.getenv('DB_PORT', '5432'))
        self.database = os.getenv('DB_NAME', 'vkinder_db')
        self.user = os.getenv('DB_USER', 'vkinder_user')
        self.password = os.getenv('DB_PASSWORD', 'vkinder123')
        self.os_type = self._detect_os()
    
    def _detect_os(self) -> str:
        """
        –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
        
        Returns:
            str: 'windows', 'macos', 'linux' –∏–ª–∏ 'unknown'
        """
        system = platform.system().lower()
        if system == 'windows':
            return 'windows'
        elif system == 'darwin':
            return 'macos'
        elif system == 'linux':
            return 'linux'
        else:
            return 'unknown'
    
    def check_postgresql_status(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ PostgreSQL
        
        Returns:
            bool: True –µ—Å–ª–∏ PostgreSQL –∑–∞–ø—É—â–µ–Ω, False –∏–Ω–∞—á–µ
        """
        try:
            # –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ PostgreSQL
            conn = psycopg2.connect(
                host=self.host,
                port=self.port,
                database='postgres',  # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–π –ë–î
                user=self.user,
                password=self.password
            )
            conn.close()
            logger.info("‚úÖ PostgreSQL –∑–∞–ø—É—â–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω")
            return True
            
        except psycopg2.OperationalError as e:
            logger.warning(f"‚ö†Ô∏è PostgreSQL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ PostgreSQL: {e}")
            return False
    
    def start_postgresql(self) -> bool:
        """
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ PostgreSQL –¥–ª—è –≤—Å–µ—Ö –û–°
        
        Returns:
            bool: True –µ—Å–ª–∏ –∑–∞–ø—É—Å–∫ —É—Å–ø–µ—à–µ–Ω, False –∏–Ω–∞—á–µ
        """
        try:
            logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ PostgreSQL –Ω–∞ {self.os_type.upper()}...")
            
            if self.os_type == 'windows':
                return self._start_postgresql_windows()
            elif self.os_type == 'macos':
                return self._start_postgresql_macos()
            elif self.os_type == 'linux':
                return self._start_postgresql_linux()
            else:
                logger.error(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –û–°: {self.os_type}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ PostgreSQL: {e}")
            return False
    
    def _start_postgresql_windows(self) -> bool:
        """
        –ó–∞–ø—É—Å–∫ PostgreSQL –Ω–∞ Windows
        
        Returns:
            bool: True –µ—Å–ª–∏ –∑–∞–ø—É—Å–∫ —É—Å–ø–µ—à–µ–Ω, False –∏–Ω–∞—á–µ
        """
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ PostgreSQL –Ω–∞ Windows...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª—É–∂–±—É PostgreSQL
            if self._check_windows_service():
                return self._start_windows_service()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É —á–µ—Ä–µ–∑ —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫
            elif self._check_windows_installation():
                return self._start_windows_postgres()
            
            else:
                logger.error("‚ùå PostgreSQL –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ PostgreSQL —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ PostgreSQL –Ω–∞ Windows: {e}")
            return False
    
    def _start_postgresql_linux(self) -> bool:
        """
        –ó–∞–ø—É—Å–∫ PostgreSQL –Ω–∞ Linux
        
        Returns:
            bool: True –µ—Å–ª–∏ –∑–∞–ø—É—Å–∫ —É—Å–ø–µ—à–µ–Ω, False –∏–Ω–∞—á–µ
        """
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ PostgreSQL –Ω–∞ Linux...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º systemd
            if self._check_systemd():
                return self._start_systemd_postgres()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º service
            elif self._check_service_command():
                return self._start_service_postgres()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º pg_ctl
            elif self._check_pg_ctl():
                return self._start_pg_ctl()
            
            else:
                logger.error("‚ùå PostgreSQL –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: sudo apt install postgresql")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ PostgreSQL –Ω–∞ Linux: {e}")
            return False
    
    def _check_windows_service(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª—É–∂–±—ã PostgreSQL –Ω–∞ Windows"""
        try:
            result = subprocess.run(['sc', 'query', 'postgresql'], 
                                  capture_output=True, text=True, timeout=10)
            return 'postgresql' in result.stdout.lower()
        except:
            return False
    
    def _start_windows_service(self) -> bool:
        """–ó–∞–ø—É—Å–∫ —Å–ª—É–∂–±—ã PostgreSQL –Ω–∞ Windows"""
        try:
            result = subprocess.run(['sc', 'start', 'postgresql'], 
                                  capture_output=True, text=True, timeout=30)
            if result.returncode == 0:
                logger.info("‚úÖ –°–ª—É–∂–±–∞ PostgreSQL –∑–∞–ø—É—â–µ–Ω–∞")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–ª—É–∂–±—ã: {result.stderr}")
                return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–ª—É–∂–±—ã: {e}")
            return False
    
    def _check_windows_installation(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ PostgreSQL –Ω–∞ Windows"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—É—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
            common_paths = [
                r"C:\Program Files\PostgreSQL",
                r"C:\Program Files (x86)\PostgreSQL",
                r"C:\PostgreSQL"
            ]
            for path in common_paths:
                if os.path.exists(path):
                    return True
            return False
        except:
            return False
    
    def _start_windows_postgres(self) -> bool:
        """–ó–∞–ø—É—Å–∫ PostgreSQL —á–µ—Ä–µ–∑ pg_ctl –Ω–∞ Windows"""
        try:
            # –ò—â–µ–º pg_ctl –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø—É—Ç—è—Ö
            pg_ctl_paths = [
                r"C:\Program Files\PostgreSQL\*\bin\pg_ctl.exe",
                r"C:\Program Files (x86)\PostgreSQL\*\bin\pg_ctl.exe"
            ]
            
            for path_pattern in pg_ctl_paths:
                import glob
                matches = glob.glob(path_pattern)
                if matches:
                    pg_ctl = matches[0]
                    result = subprocess.run([pg_ctl, 'start', '-D', 'data'], 
                                          capture_output=True, text=True, timeout=30)
                    if result.returncode == 0:
                        logger.info("‚úÖ PostgreSQL –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ pg_ctl")
                        return True
            
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ pg_ctl")
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ PostgreSQL: {e}")
            return False
    
    def _check_systemd(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ systemd –Ω–∞ Linux"""
        try:
            result = subprocess.run(['systemctl', '--version'], 
                                  capture_output=True, text=True, timeout=5)
            return result.returncode == 0
        except:
            return False
    
    def _start_systemd_postgres(self) -> bool:
        """–ó–∞–ø—É—Å–∫ PostgreSQL —á–µ—Ä–µ–∑ systemd"""
        try:
            result = subprocess.run(['sudo', 'systemctl', 'start', 'postgresql'], 
                                  capture_output=True, text=True, timeout=30)
            if result.returncode == 0:
                logger.info("‚úÖ PostgreSQL –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ systemctl")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —á–µ—Ä–µ–∑ systemctl: {result.stderr}")
                return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —á–µ—Ä–µ–∑ systemctl: {e}")
            return False
    
    def _check_service_command(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥—ã service –Ω–∞ Linux"""
        try:
            result = subprocess.run(['service', '--version'], 
                                  capture_output=True, text=True, timeout=5)
            return result.returncode == 0
        except:
            return False
    
    def _start_service_postgres(self) -> bool:
        """–ó–∞–ø—É—Å–∫ PostgreSQL —á–µ—Ä–µ–∑ service"""
        try:
            result = subprocess.run(['sudo', 'service', 'postgresql', 'start'], 
                                  capture_output=True, text=True, timeout=30)
            if result.returncode == 0:
                logger.info("‚úÖ PostgreSQL –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ service")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —á–µ—Ä–µ–∑ service: {result.stderr}")
                return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —á–µ—Ä–µ–∑ service: {e}")
            return False
    
    def _check_pg_ctl(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ pg_ctl –Ω–∞ Linux"""
        try:
            result = subprocess.run(['which', 'pg_ctl'], 
                                  capture_output=True, text=True, timeout=5)
            return result.returncode == 0
        except:
            return False
    
    def _start_pg_ctl(self) -> bool:
        """–ó–∞–ø—É—Å–∫ PostgreSQL —á–µ—Ä–µ–∑ pg_ctl –Ω–∞ Linux"""
        try:
            # –ò—â–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–∞–Ω–Ω—ã—Ö PostgreSQL
            data_dirs = [
                '/var/lib/postgresql/data',
                '/usr/local/var/postgres',
                '/opt/postgresql/data'
            ]
            
            for data_dir in data_dirs:
                if os.path.exists(data_dir):
                    result = subprocess.run(['pg_ctl', 'start', '-D', data_dir], 
                                          capture_output=True, text=True, timeout=30)
                    if result.returncode == 0:
                        logger.info("‚úÖ PostgreSQL –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ pg_ctl")
                        return True
            
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–∞–Ω–Ω—ã—Ö PostgreSQL")
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —á–µ—Ä–µ–∑ pg_ctl: {e}")
            return False
    
    def start_postgresql_macos(self) -> bool:
        """
        –ó–∞–ø—É—Å–∫ PostgreSQL –Ω–∞ macOS
        
        Returns:
            bool: True –µ—Å–ª–∏ –∑–∞–ø—É—Å–∫ —É—Å–ø–µ—à–µ–Ω, False –∏–Ω–∞—á–µ
        """
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ PostgreSQL –Ω–∞ macOS...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ PostgreSQL —á–µ—Ä–µ–∑ Homebrew
            if self._check_homebrew_postgres():
                return self._start_homebrew_postgres()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π PostgreSQL
            elif self._check_system_postgres():
                return self._start_system_postgres()
            
            else:
                logger.error("‚ùå PostgreSQL –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —á–µ—Ä–µ–∑ Homebrew: brew install postgresql")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ PostgreSQL: {e}")
            return False
    
    def _check_homebrew_postgres(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è PostgreSQL —á–µ—Ä–µ–∑ Homebrew"""
        try:
            result = subprocess.run(['brew', 'services', 'list'], 
                                  capture_output=True, text=True, timeout=10)
            return 'postgresql' in result.stdout
        except:
            return False
    
    def _check_system_postgres(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ PostgreSQL"""
        try:
            result = subprocess.run(['which', 'postgres'], 
                                  capture_output=True, text=True, timeout=5)
            return result.returncode == 0
        except:
            return False
    
    def _start_homebrew_postgres(self) -> bool:
        """–ó–∞–ø—É—Å–∫ PostgreSQL —á–µ—Ä–µ–∑ Homebrew"""
        try:
            logger.info("üç∫ –ó–∞–ø—É—Å–∫ PostgreSQL —á–µ—Ä–µ–∑ Homebrew...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º PostgreSQL —á–µ—Ä–µ–∑ brew services
            result = subprocess.run(['brew', 'services', 'start', 'postgresql'], 
                                  capture_output=True, text=True, timeout=30)
            
            if result.returncode == 0:
                logger.info("‚úÖ PostgreSQL –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ Homebrew")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —á–µ—Ä–µ–∑ Homebrew: {result.stderr}")
                return False
                
        except subprocess.TimeoutExpired:
            logger.error("‚ùå –¢–∞–π–º–∞—É—Ç –∑–∞–ø—É—Å–∫–∞ PostgreSQL")
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —á–µ—Ä–µ–∑ Homebrew: {e}")
            return False
    
    def _start_system_postgres(self) -> bool:
        """–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ PostgreSQL"""
        try:
            logger.info("üîß –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ PostgreSQL...")
            
            # –ü—Ä–æ–±—É–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å —á–µ—Ä–µ–∑ pg_ctl
            result = subprocess.run(['pg_ctl', 'start', '-D', '/usr/local/var/postgres'], 
                                  capture_output=True, text=True, timeout=30)
            
            if result.returncode == 0:
                logger.info("‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–π PostgreSQL –∑–∞–ø—É—â–µ–Ω")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ PostgreSQL: {result.stderr}")
                return False
                
        except subprocess.TimeoutExpired:
            logger.error("‚ùå –¢–∞–π–º–∞—É—Ç –∑–∞–ø—É—Å–∫–∞ PostgreSQL")
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ PostgreSQL: {e}")
            return False
    
    def wait_for_postgresql(self, timeout: int = 60) -> bool:
        """
        –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ PostgreSQL
        
        Args:
            timeout (int): –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            
        Returns:
            bool: True –µ—Å–ª–∏ PostgreSQL –∑–∞–ø—É—Å—Ç–∏–ª—Å—è, False –∏–Ω–∞—á–µ
        """
        logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ PostgreSQL (—Ç–∞–π–º–∞—É—Ç: {timeout}—Å)...")
        
        start_time = time.time()
        while time.time() - start_time < timeout:
            if self.check_postgresql_status():
                logger.info("‚úÖ PostgreSQL —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
                return True
            
            time.sleep(2)  # –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
        
        logger.error(f"‚ùå –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è PostgreSQL ({timeout}—Å)")
        return False
    
    def ensure_postgresql_running(self) -> bool:
        """
        –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ PostgreSQL –∑–∞–ø—É—â–µ–Ω
        
        Returns:
            bool: True –µ—Å–ª–∏ PostgreSQL –∑–∞–ø—É—â–µ–Ω, False –∏–Ω–∞—á–µ
        """
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ PostgreSQL...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        if self.check_postgresql_status():
            return True
        
        # –ï—Å–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å
        logger.info("üöÄ PostgreSQL –Ω–µ –∑–∞–ø—É—â–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å...")
        
        if self.start_postgresql():
            # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
            if self.wait_for_postgresql():
                return True
        
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å PostgreSQL")
        return False
    
    def create_database_if_not_exists(self) -> bool:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        
        Returns:
            bool: True –µ—Å–ª–∏ –ë–î —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, False –∏–Ω–∞—á–µ
        """
        try:
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–π –ë–î postgres
            conn = psycopg2.connect(
                host=self.host,
                port=self.port,
                database='postgres',
                user=self.user,
                password=self.password
            )
            conn.autocommit = True
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ë–î
            cursor.execute("SELECT 1 FROM pg_database WHERE datname = %s", (self.database,))
            if cursor.fetchone():
                logger.info(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '{self.database}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                cursor.close()
                conn.close()
                return True
            
            # –°–æ–∑–¥–∞–µ–º –ë–î
            logger.info(f"üî® –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö '{self.database}'...")
            cursor.execute(f'CREATE DATABASE "{self.database}"')
            logger.info(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '{self.database}' —Å–æ–∑–¥–∞–Ω–∞")
            
            cursor.close()
            conn.close()
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    def get_postgresql_info(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ PostgreSQL
        
        Returns:
            Dict[str, Any]: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ PostgreSQL
        """
        try:
            conn = psycopg2.connect(
                host=self.host,
                port=self.port,
                database='postgres',
                user=self.user,
                password=self.password
            )
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Å–∏—é PostgreSQL
            cursor.execute("SELECT version()")
            version = cursor.fetchone()[0]
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ë–î
            cursor.execute("SELECT datname FROM pg_database WHERE datistemplate = false")
            databases = [row[0] for row in cursor.fetchall()]
            
            cursor.close()
            conn.close()
            
            return {
                'version': version,
                'host': self.host,
                'port': self.port,
                'user': self.user,
                'databases': databases,
                'target_database': self.database,
                'target_database_exists': self.database in databases
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ PostgreSQL: {e}")
            return {'error': str(e)}
    
    def stop_postgresql(self) -> bool:
        """
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ PostgreSQL –¥–ª—è –≤—Å–µ—Ö –û–°
        
        Returns:
            bool: True –µ—Å–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞, False –∏–Ω–∞—á–µ
        """
        try:
            logger.info(f"üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ PostgreSQL –Ω–∞ {self.os_type.upper()}...")
            
            if self.os_type == 'windows':
                return self._stop_postgresql_windows()
            elif self.os_type == 'macos':
                return self._stop_postgresql_macos()
            elif self.os_type == 'linux':
                return self._stop_postgresql_linux()
            else:
                logger.error(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –û–°: {self.os_type}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ PostgreSQL: {e}")
            return False
    
    def _stop_postgresql_windows(self) -> bool:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ PostgreSQL –Ω–∞ Windows"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–ª—É–∂–±—É
            result = subprocess.run(['sc', 'stop', 'postgresql'], 
                                  capture_output=True, text=True, timeout=30)
            if result.returncode == 0:
                logger.info("‚úÖ –°–ª—É–∂–±–∞ PostgreSQL –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–ª—É–∂–±—ã: {result.stderr}")
                return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ PostgreSQL –Ω–∞ Windows: {e}")
            return False
    
    def _stop_postgresql_linux(self) -> bool:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ PostgreSQL –Ω–∞ Linux"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–µ—Ä–µ–∑ systemctl
            if self._check_systemd():
                result = subprocess.run(['sudo', 'systemctl', 'stop', 'postgresql'], 
                                      capture_output=True, text=True, timeout=30)
                if result.returncode == 0:
                    logger.info("‚úÖ PostgreSQL –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ systemctl")
                    return True
            
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–µ—Ä–µ–∑ service
            if self._check_service_command():
                result = subprocess.run(['sudo', 'service', 'postgresql', 'stop'], 
                                      capture_output=True, text=True, timeout=30)
                if result.returncode == 0:
                    logger.info("‚úÖ PostgreSQL –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ service")
                    return True
            
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å PostgreSQL")
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ PostgreSQL –Ω–∞ Linux: {e}")
            return False
    
    def _stop_postgresql_macos(self) -> bool:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ PostgreSQL –Ω–∞ macOS"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–µ—Ä–µ–∑ Homebrew
            if self._check_homebrew_postgres():
                result = subprocess.run(['brew', 'services', 'stop', 'postgresql'], 
                                      capture_output=True, text=True, timeout=30)
                if result.returncode == 0:
                    logger.info("‚úÖ PostgreSQL –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ Homebrew")
                    return True
            
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–µ—Ä–µ–∑ pg_ctl
            if self._check_system_postgres():
                result = subprocess.run(['pg_ctl', 'stop'], 
                                      capture_output=True, text=True, timeout=30)
                if result.returncode == 0:
                    logger.info("‚úÖ PostgreSQL –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ pg_ctl")
                    return True
            
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å PostgreSQL")
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ PostgreSQL –Ω–∞ macOS: {e}")
            return False
    
    def restart_postgresql(self) -> bool:
        """
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ PostgreSQL –¥–ª—è –≤—Å–µ—Ö –û–°
        
        Returns:
            bool: True –µ—Å–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —É—Å–ø–µ—à–µ–Ω, False –∏–Ω–∞—á–µ
        """
        try:
            logger.info(f"üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ PostgreSQL –Ω–∞ {self.os_type.upper()}...")
            
            # –°–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
            if self.stop_postgresql():
                time.sleep(2)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
                
                # –ó–∞—Ç–µ–º –∑–∞–ø—É—Å–∫–∞–µ–º
                if self.start_postgresql():
                    # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
                    if self.wait_for_postgresql():
                        logger.info("‚úÖ PostgreSQL —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω")
                        return True
            
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å PostgreSQL")
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ PostgreSQL: {e}")
            return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ PostgreSQL"""
    print("üêò –ú–ï–ù–ï–î–ñ–ï–† POSTGRESQL")
    print("=" * 50)
    
    manager = PostgreSQLManager()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º PostgreSQL
    if manager.ensure_postgresql_running():
        print("‚úÖ PostgreSQL –∑–∞–ø—É—â–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # –°–æ–∑–¥–∞–µ–º –ë–î –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if manager.create_database_if_not_exists():
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        info = manager.get_postgresql_info()
        if 'error' not in info:
            print(f"\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ PostgreSQL:")
            print(f"  üêò –í–µ—Ä—Å–∏—è: {info['version']}")
            print(f"  üè† –•–æ—Å—Ç: {info['host']}:{info['port']}")
            print(f"  üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {info['user']}")
            print(f"  üìÑ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {info['target_database']}")
            print(f"  ‚úÖ –ë–î —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {info['target_database_exists']}")
            print(f"  üìã –í—Å–µ–≥–æ –ë–î: {len(info['databases'])}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {info['error']}")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å PostgreSQL")
        print("\nüîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("  1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ PostgreSQL: brew install postgresql")
        print("  2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –≤—Ä—É—á–Ω—É—é: brew services start postgresql")
        print("  3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ .env —Ñ–∞–π–ª–µ")


if __name__ == "__main__":
    main()
