#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö VKinder Bot
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ë–î, –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
"""

import sys
import os
from typing import Optional, List, Dict, Any, Union
from datetime import datetime
from sqlalchemy import create_engine, text, inspect
from sqlalchemy.orm import sessionmaker
from sqlalchemy.exc import SQLAlchemyError, IntegrityError, OperationalError
from contextlib import contextmanager

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
try:
    from .models import (
        Base, VKUser, Photo, Favorite, Blacklisted, SearchHistory, 
        UserSettings, BotLog, BotMessage
    )
except ImportError:
    # –ï—Å–ª–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ
    from models import (
        Base, VKUser, Photo, Favorite, Blacklisted, SearchHistory, 
        UserSettings, BotLog, BotMessage
    )
import os
from dotenv import load_dotenv
from loguru import logger
try:
    from .postgres_manager import PostgreSQLManager
except ImportError:
    from postgres_manager import PostgreSQLManager

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()


class DatabaseInterface:
    """
    –ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö VKinder Bot
    
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è:
    - –°–æ–∑–¥–∞–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è/–æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü–∞–º–∏
    - CRUD –æ–ø–µ—Ä–∞—Ü–∏–π —Å –¥–∞–Ω–Ω—ã–º–∏
    - –û–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
    - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        self.engine = None
        self.Session = None
        self._setup_connection()
    
    def _setup_connection(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º PostgreSQL –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            postgres_manager = PostgreSQLManager()
            if not postgres_manager.ensure_postgresql_running():
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å PostgreSQL")
                raise Exception("PostgreSQL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            
            # –°–æ–∑–¥–∞–µ–º –ë–î –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if not postgres_manager.create_database_if_not_exists():
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
                raise Exception("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL –∏—Å–ø–æ–ª—å–∑—É—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ postgres_manager
            # postgres_manager –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—Ç
            db_host = postgres_manager.host
            db_port = postgres_manager.port
            db_name = postgres_manager.database
            db_user = postgres_manager.user
            db_password = postgres_manager.password
            
            database_url = f"postgresql://{db_user}:{db_password}@{db_host}:{db_port}/{db_name}"
            self.engine = create_engine(database_url, echo=False)
            self.Session = sessionmaker(bind=self.engine)
            
            logger.info("‚úÖ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –∑–∞–ø—É—Å–∫–æ–º PostgreSQL")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ë–î: {e}")
            raise
    
    @contextmanager
    def get_session(self):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Å—Å–∏–µ–π –ë–î"""
        session = self.Session()
        try:
            yield session
            session.commit()
        except Exception as e:
            session.rollback()
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Å–µ—Å—Å–∏–∏ –ë–î: {e}")
            raise
        finally:
            session.close()
    
    def test_connection(self) -> bool:
        """
        –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        
        Returns:
            bool: True –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
        """
        try:
            with self.get_session() as session:
                # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                result = session.execute(text("SELECT 1")).fetchone()
                logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç")
                return True
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            return False
    
    def create_database(self) -> bool:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        
        Returns:
            bool: True –µ—Å–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
        """
        try:
            logger.info("üî® –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
            Base.metadata.create_all(self.engine)
            logger.info("‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ –ë–î
            self.add_bot_log(
                vk_user_id=0,  # –°–∏—Å—Ç–µ–º–Ω—ã–π –ª–æ–≥
                log_level="info",
                log_message="–í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω—ã"
            )
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")
            return False
    
    def drop_database(self) -> bool:
        """
        –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        
        Returns:
            bool: True –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
        """
        try:
            logger.info("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü...")
            Base.metadata.drop_all(self.engine)
            logger.info("‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —É–¥–∞–ª–µ–Ω—ã")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ –ë–î (–µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ bot_logs –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
            try:
                self.add_bot_log(
                    vk_user_id=0,  # –°–∏—Å—Ç–µ–º–Ω—ã–π –ª–æ–≥
                    log_level="warning",
                    log_message="–í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —É–¥–∞–ª–µ–Ω—ã"
                )
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")
            return False
    
    def clear_table(self, table_name: str) -> bool:
        """
        –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
        
        Args:
            table_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ –æ—á–∏—Å—Ç–∫–∞ —É—Å–ø–µ—à–Ω–∞, False –∏–Ω–∞—á–µ
        """
        try:
            with self.get_session() as session:
                # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª—å —Ç–∞–±–ª–∏—Ü—ã
                table_model = self._get_table_model(table_name)
                if not table_model:
                    logger.error(f"‚ùå –¢–∞–±–ª–∏—Ü–∞ '{table_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    return False
                
                # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
                session.query(table_model).delete()
                logger.info(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ '{table_name}' –æ—á–∏—â–µ–Ω–∞")
                return True
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ç–∞–±–ª–∏—Ü—ã '{table_name}': {e}")
            return False
    
    def clear_all_tables(self) -> bool:
        """
        –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã)
        
        Returns:
            bool: True –µ—Å–ª–∏ –æ—á–∏—Å—Ç–∫–∞ —É—Å–ø–µ—à–Ω–∞, False –∏–Ω–∞—á–µ
        """
        try:
            logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü...")
            
            # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (—Å —É—á–µ—Ç–æ–º –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π)
            models = [BotMessage, BotLog, SearchHistory, Favorite, Blacklisted, 
                     UserSettings, Photo, VKUser]
            
            with self.get_session() as session:
                for model in models:
                    try:
                        session.query(model).delete()
                        logger.debug(f"–û—á–∏—â–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞: {model.__tablename__}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ç–∞–±–ª–∏—Ü—ã {model.__tablename__}: {e}")
            
            logger.info("‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –æ—á–∏—â–µ–Ω—ã")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ –ë–î
            self.add_bot_log(
                vk_user_id=0,  # –°–∏—Å—Ç–µ–º–Ω—ã–π –ª–æ–≥
                log_level="info",
                log_message="–í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω—ã"
            )
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü: {e}")
            return False
    
    def get_table_info(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
        
        Returns:
            Dict[str, Any]: –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–∞–±–ª–∏—Ü–∞—Ö
        """
        try:
            inspector = inspect(self.engine)
            tables = inspector.get_table_names()
            
            info = {
                "total_tables": len(tables),
                "tables": {}
            }
            
            with self.get_session() as session:
                for table_name in tables:
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª—å —Ç–∞–±–ª–∏—Ü—ã
                        model = self._get_table_model(table_name)
                        if model:
                            try:
                                count = session.query(model).count()
                                info["tables"][table_name] = {
                                    "count": count,
                                    "model": model.__name__
                                }
                            except Exception as count_error:
                                logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ {table_name}: {count_error}")
                                info["tables"][table_name] = {
                                    "count": "error",
                                    "model": model.__name__
                                }
                        else:
                            info["tables"][table_name] = {
                                "count": "unknown",
                                "model": "unknown"
                            }
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∞–±–ª–∏—Ü—ã {table_name}: {e}")
                        info["tables"][table_name] = {
                            "count": f"error: {e}",
                            "model": "unknown"
                        }
            
            return info
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞–±–ª–∏—Ü–∞—Ö: {e}")
            return {"error": str(e)}
    
    def _get_table_model(self, table_name: str):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Ç–∞–±–ª–∏—Ü—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
        table_models = {
            "vk_users": VKUser,
            "photos": Photo,
            "favorites": Favorite,
            "blacklisted": Blacklisted,
            "search_history": SearchHistory,
            "user_settings": UserSettings,
            "bot_logs": BotLog,
            "bot_messages": BotMessage
        }
        return table_models.get(table_name)
    
    # === CRUD –û–ü–ï–†–ê–¶–ò–ò –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ===
    
    def add_user(self, vk_user_id: int, first_name: str, last_name: str, 
                 age: Optional[int] = None, sex: Optional[int] = None,
                 city: Optional[str] = None, country: Optional[str] = None,
                 photo_url: Optional[str] = None) -> bool:
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            vk_user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è VK
            first_name (str): –ò–º—è
            last_name (str): –§–∞–º–∏–ª–∏—è
            age (Optional[int]): –í–æ–∑—Ä–∞—Å—Ç
            sex (Optional[int]): –ü–æ–ª (1 - –∂–µ–Ω—Å–∫–∏–π, 2 - –º—É–∂—Å–∫–æ–π)
            city (Optional[str]): –ì–æ—Ä–æ–¥
            country (Optional[str]): –°—Ç—Ä–∞–Ω–∞
            photo_url (Optional[str]): URL —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
        """
        try:
            with self.get_session() as session:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                existing_user = session.query(VKUser).filter(VKUser.vk_user_id == vk_user_id).first()
                if existing_user:
                    logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {vk_user_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                    return True
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = VKUser(
                    vk_user_id=vk_user_id,
                    first_name=first_name,
                    last_name=last_name,
                    age=age,
                    sex=sex,
                    city=city,
                    country=country,
                    photo_url=photo_url
                )
                
                session.add(user)
                session.commit()
                logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {vk_user_id} ({first_name} {last_name}) –¥–æ–±–∞–≤–ª–µ–Ω")
                
                # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ –ë–î
                self.add_bot_log(
                    vk_user_id=0,  # –°–∏—Å—Ç–µ–º–Ω—ã–π –ª–æ–≥
                    log_level="info",
                    log_message=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {vk_user_id} ({first_name} {last_name}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î"
                )
                return True
                
        except IntegrityError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {vk_user_id}: {e}")
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {vk_user_id}: {e}")
            return False
    
    def get_user(self, vk_user_id: int) -> Optional[VKUser]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ VK ID
        
        Args:
            vk_user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è VK
            
        Returns:
            Optional[VKUser]: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ None
        """
        try:
            with self.get_session() as session:
                user = session.query(VKUser).filter(VKUser.vk_user_id == vk_user_id).first()
                return user
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {vk_user_id}: {e}")
            return None
    
    def update_user(self, vk_user_id: int, **kwargs) -> bool:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            vk_user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è VK
            **kwargs: –ü–æ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            
        Returns:
            bool: True –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
        """
        try:
            with self.get_session() as session:
                user = session.query(VKUser).filter(VKUser.vk_user_id == vk_user_id).first()
                if not user:
                    logger.error(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {vk_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return False
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è
                for key, value in kwargs.items():
                    if hasattr(user, key):
                        setattr(user, key, value)
                
                logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {vk_user_id} –æ–±–Ω–æ–≤–ª–µ–Ω")
                
                # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ –ë–î
                self.add_bot_log(
                    vk_user_id=0,  # –°–∏—Å—Ç–µ–º–Ω—ã–π –ª–æ–≥
                    log_level="info",
                    log_message=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {vk_user_id} –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ë–î"
                )
                return True
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {vk_user_id}: {e}")
            return False
    
    def delete_user(self, vk_user_id: int) -> bool:
        """
        –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            vk_user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è VK
            
        Returns:
            bool: True –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
        """
        try:
            with self.get_session() as session:
                user = session.query(VKUser).filter(VKUser.vk_user_id == vk_user_id).first()
                if not user:
                    logger.error(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {vk_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return False
                
                session.delete(user)
                session.commit()
                logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {vk_user_id} —É–¥–∞–ª–µ–Ω")
                
                # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ –ë–î
                self.add_bot_log(
                    vk_user_id=0,  # –°–∏—Å—Ç–µ–º–Ω—ã–π –ª–æ–≥
                    log_level="info",
                    log_message=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {vk_user_id} —É–¥–∞–ª–µ–Ω –∏–∑ –ë–î"
                )
                return True
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {vk_user_id}: {e}")
            return False
    
    # === –û–ü–ï–†–ê–¶–ò–ò –° –õ–û–ì–ê–ú–ò ===
    
    def add_bot_log(self, vk_user_id: int, log_level: str, log_message: str) -> bool:
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            vk_user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è VK (0 –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ª–æ–≥–æ–≤)
            log_level (str): –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            log_message (str): –¢–µ–∫—Å—Ç –ª–æ–≥–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
        """
        try:
            with self.get_session() as session:
                log_entry = BotLog(
                    vk_user_id=vk_user_id,
                    log_level=log_level,
                    log_message=log_message
                )
                session.add(log_entry)
                logger.debug(f"–õ–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω: {log_level} - {log_message}")
                return True
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∞: {e}")
            return False
    
    def get_bot_logs(self, vk_user_id: int = 0, log_level: str = None, limit: int = 100) -> List[BotLog]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –±–æ—Ç–∞
        
        Args:
            vk_user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è VK (0 –¥–ª—è –≤—Å–µ—Ö)
            log_level (str): –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            limit (int): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
            
        Returns:
            List[BotLog]: –°–ø–∏—Å–æ–∫ –ª–æ–≥–æ–≤
        """
        try:
            with self.get_session() as session:
                query = session.query(BotLog)
                
                if vk_user_id != 0:
                    query = query.filter(BotLog.vk_user_id == vk_user_id)
                
                if log_level:
                    query = query.filter(BotLog.log_level == log_level)
                
                logs = query.order_by(BotLog.created_at.desc()).limit(limit).all()
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—ä–µ–∫—Ç—ã –≤ —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å —Å–µ—Å—Å–∏–µ–π
                result = []
                for log in logs:
                    result.append({
                        'id': log.id,
                        'vk_user_id': log.vk_user_id,
                        'log_level': log.log_level,
                        'log_message': log.log_message,
                        'created_at': log.created_at
                    })
                return result
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
            return []
    
    # === –û–ü–ï–†–ê–¶–ò–ò –° –°–û–û–ë–©–ï–ù–ò–Ø–ú–ò ===
    
    def add_bot_message(self, vk_user_id: int, message_type: str, message_text: str) -> bool:
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
        
        Args:
            vk_user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è VK
            message_type (str): –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è (command, response, error)
            message_text (str): –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            
        Returns:
            bool: True –µ—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
        """
        try:
            with self.get_session() as session:
                message = BotMessage(
                    vk_user_id=vk_user_id,
                    message_type=message_type,
                    message_text=message_text
                )
                session.add(message)
                logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {message_type} - {message_text[:50]}...")
                return True
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    
    def get_user_messages(self, vk_user_id: int, limit: int = 50) -> List[BotMessage]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            vk_user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è VK
            limit (int): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
            
        Returns:
            List[BotMessage]: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        try:
            with self.get_session() as session:
                messages = (session.query(BotMessage)
                          .filter(BotMessage.vk_user_id == vk_user_id)
                          .order_by(BotMessage.sent_at.desc())
                          .limit(limit)
                          .all())
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—ä–µ–∫—Ç—ã –≤ —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å —Å–µ—Å—Å–∏–µ–π
                result = []
                for msg in messages:
                    result.append({
                        'id': msg.id,
                        'vk_user_id': msg.vk_user_id,
                        'message_type': msg.message_type,
                        'message_text': msg.message_text,
                        'sent_at': msg.sent_at
                    })
                return result
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {vk_user_id}: {e}")
            return []
    
    # === –û–ü–ï–†–ê–¶–ò–ò –° –ò–ó–ë–†–ê–ù–ù–´–ú ===
    
    def add_favorite(self, user_vk_id: int, favorite_vk_id: int) -> bool:
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
        
        Args:
            user_vk_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–±–∞–≤–ª—è–µ—Ç
            favorite_vk_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª—è—é—Ç
            
        Returns:
            bool: True –µ—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
        """
        try:
            with self.get_session() as session:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ
                existing = (session.query(Favorite)
                          .filter(Favorite.user_vk_id == user_vk_id)
                          .filter(Favorite.favorite_vk_id == favorite_vk_id)
                          .first())
                
                if existing:
                    logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {favorite_vk_id} —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º —É {user_vk_id}")
                    return True
                
                favorite = Favorite(
                    user_vk_id=user_vk_id,
                    favorite_vk_id=favorite_vk_id
                )
                session.add(favorite)
                session.commit()
                logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {favorite_vk_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –∫ {user_vk_id}")
                
                # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ –ë–î
                self.add_bot_log(
                    vk_user_id=0,  # –°–∏—Å—Ç–µ–º–Ω—ã–π –ª–æ–≥
                    log_level="info",
                    log_message=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {favorite_vk_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –∫ {user_vk_id}"
                )
                return True
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: {e}")
            return False
    
    def get_favorites(self, user_vk_id: int) -> List[Favorite]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_vk_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è VK
            
        Returns:
            List[Favorite]: –°–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö
        """
        try:
            with self.get_session() as session:
                favorites = (session.query(Favorite)
                           .filter(Favorite.user_vk_id == user_vk_id)
                           .order_by(Favorite.created_at.desc())
                           .limit(10)
                           .all())
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—ä–µ–∫—Ç—ã –≤ —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å —Å–µ—Å—Å–∏–µ–π
                result = []
                for fav in favorites:
                    result.append({
                        'id': fav.id,
                        'user_vk_id': fav.user_vk_id,
                        'favorite_vk_id': fav.favorite_vk_id,
                        'created_at': fav.created_at
                    })
                return result
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –¥–ª—è {user_vk_id}: {e}")
            return []
    
    def remove_favorite(self, user_vk_id: int, favorite_vk_id: int) -> bool:
        """
        –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
        
        Args:
            user_vk_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            favorite_vk_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            
        Returns:
            bool: True –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
        """
        try:
            with self.get_session() as session:
                favorite = (session.query(Favorite)
                          .filter(Favorite.user_vk_id == user_vk_id)
                          .filter(Favorite.favorite_vk_id == favorite_vk_id)
                          .first())
                
                if not favorite:
                    logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {favorite_vk_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º —É {user_vk_id}")
                    return True
                
                session.delete(favorite)
                session.commit()
                logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {favorite_vk_id} —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ —É {user_vk_id}")
                
                # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ –ë–î
                self.add_bot_log(
                    vk_user_id=0,  # –°–∏—Å—Ç–µ–º–Ω—ã–π –ª–æ–≥
                    log_level="info",
                    log_message=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {favorite_vk_id} —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ —É {user_vk_id}"
                )
                return True
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {e}")
            return False

    # === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ß–ï–†–ù–´–ú –°–ü–ò–°–ö–û–ú ===

    def add_to_blacklist(self, user_id: int, blacklisted_id: int) -> bool:
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
            blacklisted_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª—è—é—Ç –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
            
        Returns:
            bool: True –µ—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
        """
        try:
            with self.get_session() as session:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ
                existing = session.query(Blacklisted).filter(
                    Blacklisted.user_vk_id == user_id,
                    Blacklisted.blocked_vk_id == blacklisted_id
                ).first()
                
                if existing:
                    self.logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {blacklisted_id} —É–∂–µ –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    return True
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
                blacklisted = Blacklisted(
                    user_vk_id=user_id,
                    blocked_vk_id=blacklisted_id,
                    created_at=datetime.now()
                )
                session.add(blacklisted)
                session.commit()
                
                self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {blacklisted_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return True
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫: {e}")
            return False

    def get_blacklisted(self, user_id: int) -> List[int]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            List[int]: –°–ø–∏—Å–æ–∫ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ
        """
        try:
            with self.get_session() as session:
                blacklisted = session.query(Blacklisted).filter(
                    Blacklisted.user_vk_id == user_id
                ).all()
                
                return [b.blocked_vk_id for b in blacklisted]
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞: {e}")
            return []

    def remove_from_blacklist(self, user_id: int, blacklisted_id: int) -> bool:
        """
        –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π —É–¥–∞–ª—è–µ—Ç –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
            blacklisted_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —É–¥–∞–ª—è—é—Ç –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
        """
        try:
            with self.get_session() as session:
                blacklisted = session.query(Blacklisted).filter(
                    Blacklisted.user_vk_id == user_id,
                    Blacklisted.blocked_vk_id == blacklisted_id
                ).first()
                
                if not blacklisted:
                    self.logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {blacklisted_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    return False
                
                session.delete(blacklisted)
                session.commit()
                
                self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {blacklisted_id} —É–¥–∞–ª–µ–Ω –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return True
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞: {e}")
            return False

    def get_user_statistics(self, user_id: int) -> dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è VK
            
        Returns:
            dict: –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        try:
            stats = {}
            
            with self.get_session() as session:
                # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç (—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ vk_users, –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º)
                try:
                    # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞—à–µ–ª —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                    # —á–µ—Ä–µ–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω –Ω–∞—à–µ–ª
                    viewed_count = session.query(Photo).filter(
                        Photo.found_by_user_id == user_id
                    ).with_entities(Photo.vk_user_id).distinct().count()
                    stats['viewed_profiles'] = viewed_count
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç: {e}")
                    stats['viewed_profiles'] = 0
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
                try:
                    favorites_count = session.query(Favorite).filter(
                        Favorite.user_vk_id == user_id
                    ).count()
                    stats['favorites_count'] = favorites_count
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö: {e}")
                    stats['favorites_count'] = 0
                
                try:
                    blacklisted_count = session.query(Blacklisted).filter(
                        Blacklisted.user_vk_id == user_id
                    ).count()
                    stats['blacklisted_count'] = blacklisted_count
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {e}")
                    stats['blacklisted_count'] = 0
                
                # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
                try:
                    viewed_photos = session.query(Photo).filter(
                        Photo.found_by_user_id == user_id
                    ).count()
                    stats['viewed_photos'] = viewed_photos
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ: {e}")
                    stats['viewed_photos'] = 0
                
                # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Å–µ—Å—Å–∏–π
                try:
                    search_sessions = session.query(SearchHistory).filter(
                        SearchHistory.user_vk_id == user_id
                    ).count()
                    stats['search_sessions'] = search_sessions
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–∏—Å–∫–æ–≤: {e}")
                    stats['search_sessions'] = 0
            
            logger.info(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ–ª—É—á–µ–Ω–∞: {len(stats)} –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π")
            return stats
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return {}


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö VKinder Bot")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    db_interface = DatabaseInterface()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    print("\n1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
    if db_interface.test_connection():
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–±–ª–∏—Ü–∞—Ö
    print("\n2. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞–±–ª–∏—Ü–∞—Ö...")
    table_info = db_interface.get_table_info()
    print(f"üìä –í—Å–µ–≥–æ —Ç–∞–±–ª–∏—Ü: {table_info.get('total_tables', 0)}")
    
    for table_name, info in table_info.get('tables', {}).items():
        print(f"  - {table_name}: {info['count']} –∑–∞–ø–∏—Å–µ–π")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print("\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
    test_user_id = 123456789
    if db_interface.add_user(
        vk_user_id=test_user_id,
        first_name="–¢–µ—Å—Ç",
        last_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
        age=25,
        sex=2,
        city="–ú–æ—Å–∫–≤–∞"
    ):
        print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∞
    print("\n4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∞...")
    if db_interface.add_bot_log(
        vk_user_id=test_user_id,
        log_level="info",
        log_message="–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ë–î"
    ):
        print("‚úÖ –õ–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∞")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    print("\n5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è...")
    if db_interface.add_bot_message(
        vk_user_id=test_user_id,
        message_type="command",
        message_text="/start"
    ):
        print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è")
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    print("\n6. –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞–±–ª–∏—Ü–∞—Ö...")
    table_info = db_interface.get_table_info()
    for table_name, info in table_info.get('tables', {}).items():
        print(f"  - {table_name}: {info['count']} –∑–∞–ø–∏—Å–µ–π")
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")


if __name__ == "__main__":
    main()
