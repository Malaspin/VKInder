#!/usr/bin/env python3
"""
CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö VKinder Bot
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è, —É–¥–∞–ª–µ–Ω–∏—è, –æ—á–∏—Å—Ç–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ë–î
"""

import sys
import argparse
from typing import List, Optional

# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
try:
    from .database_interface import DatabaseInterface
    from .postgres_manager import PostgreSQLManager
except ImportError:
    # –ï—Å–ª–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ
    from database_interface import DatabaseInterface
    from postgres_manager import PostgreSQLManager

from loguru import logger


class DatabaseCLI:
    """CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CLI"""
        self.db_interface = DatabaseInterface()
        self.postgres_manager = PostgreSQLManager()
    
    def create_database(self) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        print("üî® –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        return self.db_interface.create_database()
    
    def drop_database(self) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        print("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü...")
        confirm = input("‚ö†Ô∏è  –í—ã —É–≤–µ—Ä–µ–Ω—ã? –≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ! (yes/no): ")
        if confirm.lower() in ['yes', 'y', '–¥–∞', '–¥']:
            return self.db_interface.drop_database()
        else:
            print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return False
    
    def clear_table(self, table_name: str) -> bool:
        """–û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã"""
        print(f"üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã '{table_name}'...")
        return self.db_interface.clear_table(table_name)
    
    def clear_all_tables(self) -> bool:
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü"""
        print("üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü...")
        confirm = input("‚ö†Ô∏è  –í—ã —É–≤–µ—Ä–µ–Ω—ã? –≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ! (yes/no): ")
        if confirm.lower() in ['yes', 'y', '–¥–∞', '–¥']:
            return self.db_interface.clear_all_tables()
        else:
            print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return False
    
    def show_info(self) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        print("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:")
        print("=" * 50)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        if not self.db_interface.test_connection():
            print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–±–ª–∏—Ü–∞—Ö
        table_info = self.db_interface.get_table_info()
        
        if "error" in table_info:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {table_info['error']}")
            return
        
        print(f"üìã –í—Å–µ–≥–æ —Ç–∞–±–ª–∏—Ü: {table_info.get('total_tables', 0)}")
        print()
        
        for table_name, info in table_info.get('tables', {}).items():
            count = info.get('count', 'unknown')
            model = info.get('model', 'unknown')
            print(f"  üìÑ {table_name}")
            print(f"     - –ó–∞–ø–∏—Å–µ–π: {count}")
            print(f"     - –ú–æ–¥–µ–ª—å: {model}")
            print()
    
    def add_test_data(self) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        print("üß™ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        test_users = [
            {"vk_user_id": 1001, "first_name": "–ê–Ω–Ω–∞", "last_name": "–ò–≤–∞–Ω–æ–≤–∞", "age": 25, "sex": 1, "city": "–ú–æ—Å–∫–≤–∞"},
            {"vk_user_id": 1002, "first_name": "–ü–µ—Ç—Ä", "last_name": "–ü–µ—Ç—Ä–æ–≤", "age": 30, "sex": 2, "city": "–°–ü–±"},
            {"vk_user_id": 1003, "first_name": "–ú–∞—Ä–∏—è", "last_name": "–°–∏–¥–æ—Ä–æ–≤–∞", "age": 28, "sex": 1, "city": "–ö–∞–∑–∞–Ω—å"},
        ]
        
        success_count = 0
        for user_data in test_users:
            if self.db_interface.add_user(**user_data):
                success_count += 1
                print(f"  ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data['vk_user_id']} –¥–æ–±–∞–≤–ª–µ–Ω")
            else:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data['vk_user_id']}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ª–æ–≥–∏
        test_logs = [
            {"vk_user_id": 0, "log_level": "info", "log_message": "–°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞"},
            {"vk_user_id": 0, "log_level": "debug", "log_message": "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"},
            {"vk_user_id": 1001, "log_level": "info", "log_message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—à–µ–ª –≤ –±–æ—Ç–∞"},
        ]
        
        for log_data in test_logs:
            if self.db_interface.add_bot_log(**log_data):
                print(f"  ‚úÖ –õ–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω: {log_data['log_message']}")
            else:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∞")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        test_messages = [
            {"vk_user_id": 1001, "message_type": "command", "message_text": "/start"},
            {"vk_user_id": 1001, "message_type": "response", "message_text": "–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VKinder Bot!"},
            {"vk_user_id": 1002, "message_type": "command", "message_text": "/help"},
        ]
        
        for msg_data in test_messages:
            if self.db_interface.add_bot_message(**msg_data):
                print(f"  ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {msg_data['message_text']}")
            else:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è")
        
        print(f"\n‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã: {success_count}/{len(test_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        return True
    
    def show_logs(self, user_id: Optional[int] = None, level: Optional[str] = None, limit: int = 20) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏"""
        print(f"üìã –õ–æ–≥–∏ –±–æ—Ç–∞ (–ª–∏–º–∏—Ç: {limit}):")
        if user_id:
            print(f"  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")
        if level:
            print(f"  –£—Ä–æ–≤–µ–Ω—å: {level}")
        print("=" * 50)
        
        logs = self.db_interface.get_bot_logs(vk_user_id=user_id or 0, log_level=level, limit=limit)
        
        if not logs:
            print("üì≠ –õ–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        for log in logs:
            user_info = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {log['vk_user_id']}" if log['vk_user_id'] != 0 else "–°–∏—Å—Ç–µ–º–∞"
            print(f"  [{log['log_level'].upper()}] {user_info}: {log['log_message']}")
            print(f"    –í—Ä–µ–º—è: {log['created_at']}")
            print()
    
    def show_messages(self, user_id: int, limit: int = 20) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        print(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (–ª–∏–º–∏—Ç: {limit}):")
        print("=" * 50)
        
        messages = self.db_interface.get_user_messages(vk_user_id=user_id, limit=limit)
        
        if not messages:
            print("üì≠ –°–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        for msg in messages:
            print(f"  [{msg['message_type'].upper()}] {msg['message_text']}")
            print(f"    –í—Ä–µ–º—è: {msg['sent_at']}")
            print()
    
    def show_favorites(self, user_id: int) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        print(f"‚ù§Ô∏è –ò–∑–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:")
        print("=" * 50)
        
        favorites = self.db_interface.get_favorites(user_vk_id=user_id)
        
        if not favorites:
            print("üì≠ –ò–∑–±—Ä–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        for fav in favorites:
            print(f"  ID: {fav['favorite_vk_id']}")
            print(f"    –î–æ–±–∞–≤–ª–µ–Ω: {fav['created_at']}")
            print()
    
    # === –ö–û–ú–ê–ù–î–´ POSTGRESQL ===
    
    def start_postgresql(self) -> None:
        """–ó–∞–ø—É—Å–∫ PostgreSQL (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –¥–ª—è –≤—Å–µ—Ö –û–°)"""
        print("üöÄ –ó–∞–ø—É—Å–∫ PostgreSQL...")
        if self.postgres_manager.start_postgresql():
            print("‚úÖ PostgreSQL –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ PostgreSQL")
    
    def stop_postgresql(self) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ PostgreSQL (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –¥–ª—è –≤—Å–µ—Ö –û–°)"""
        print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ PostgreSQL...")
        if self.postgres_manager.stop_postgresql():
            print("‚úÖ PostgreSQL –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ PostgreSQL")
    
    def restart_postgresql(self) -> None:
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ PostgreSQL (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –¥–ª—è –≤—Å–µ—Ö –û–°)"""
        print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ PostgreSQL...")
        if self.postgres_manager.restart_postgresql():
            print("‚úÖ PostgreSQL –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ PostgreSQL")
    
    def check_postgresql_status(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ PostgreSQL"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ PostgreSQL...")
        if self.postgres_manager.check_postgresql_status():
            print("‚úÖ PostgreSQL –∑–∞–ø—É—â–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            print("‚ùå PostgreSQL –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    def show_postgresql_info(self) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ PostgreSQL"""
        print("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ PostgreSQL:")
        print("=" * 50)
        
        info = self.postgres_manager.get_postgresql_info()
        if 'error' not in info:
            print(f"üêò –í–µ—Ä—Å–∏—è: {info['version']}")
            print(f"üè† –•–æ—Å—Ç: {info['host']}:{info['port']}")
            print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {info['user']}")
            print(f"üìÑ –¶–µ–ª–µ–≤–∞—è –ë–î: {info['target_database']}")
            print(f"‚úÖ –ë–î —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {info['target_database_exists']}")
            print(f"üìã –í—Å–µ–≥–æ –ë–î: {len(info['databases'])}")
            print("\nüìã –°–ø–∏—Å–æ–∫ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö:")
            for db in info['databases']:
                print(f"  üìÑ {db}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {info['error']}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI"""
    parser = argparse.ArgumentParser(description="CLI –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö VKinder Bot")
    
    subparsers = parser.add_subparsers(dest="command", help="–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã")
    
    # –ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã
    subparsers.add_parser("create", help="–°–æ–∑–¥–∞—Ç—å –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    
    # –ö–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∏—è –±–∞–∑—ã
    subparsers.add_parser("drop", help="–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    
    # –ö–æ–º–∞–Ω–¥–∞ –æ—á–∏—Å—Ç–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
    clear_parser = subparsers.add_parser("clear", help="–û—á–∏—Å—Ç–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É")
    clear_parser.add_argument("table", help="–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –æ—á–∏—Å—Ç–∫–∏")
    
    # –ö–æ–º–∞–Ω–¥–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
    subparsers.add_parser("clear-all", help="–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã")
    
    # –ö–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞–∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    subparsers.add_parser("info", help="–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    
    # –ö–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    subparsers.add_parser("test-data", help="–î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
    
    # –ö–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞–∑–∞ –ª–æ–≥–æ–≤
    logs_parser = subparsers.add_parser("logs", help="–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏")
    logs_parser.add_argument("--user", type=int, help="ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    logs_parser.add_argument("--level", help="–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")
    logs_parser.add_argument("--limit", type=int, default=20, help="–õ–∏–º–∏—Ç –∑–∞–ø–∏—Å–µ–π")
    
    # –ö–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    messages_parser = subparsers.add_parser("messages", help="–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    messages_parser.add_argument("user_id", type=int, help="ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    messages_parser.add_argument("--limit", type=int, default=20, help="–õ–∏–º–∏—Ç –∑–∞–ø–∏—Å–µ–π")
    
    # –ö–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞–∑–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö
    favorites_parser = subparsers.add_parser("favorites", help="–ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    favorites_parser.add_argument("user_id", type=int, help="ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    
    # –ö–æ–º–∞–Ω–¥—ã PostgreSQL
    subparsers.add_parser("postgres-start", help="–ó–∞–ø—É—Å—Ç–∏—Ç—å PostgreSQL")
    subparsers.add_parser("postgres-stop", help="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å PostgreSQL")
    subparsers.add_parser("postgres-restart", help="–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å PostgreSQL")
    subparsers.add_parser("postgres-status", help="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å PostgreSQL")
    subparsers.add_parser("postgres-info", help="–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ PostgreSQL")
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        return
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä CLI
    cli = DatabaseCLI()
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
    try:
        if args.command == "create":
            cli.create_database()
        elif args.command == "drop":
            cli.drop_database()
        elif args.command == "clear":
            cli.clear_table(args.table)
        elif args.command == "clear-all":
            cli.clear_all_tables()
        elif args.command == "info":
            cli.show_info()
        elif args.command == "test-data":
            cli.add_test_data()
        elif args.command == "logs":
            cli.show_logs(user_id=args.user, level=args.level, limit=args.limit)
        elif args.command == "messages":
            cli.show_messages(user_id=args.user_id, limit=args.limit)
        elif args.command == "favorites":
            cli.show_favorites(user_id=args.user_id)
        elif args.command == "postgres-start":
            cli.start_postgresql()
        elif args.command == "postgres-stop":
            cli.stop_postgresql()
        elif args.command == "postgres-restart":
            cli.restart_postgresql()
        elif args.command == "postgres-status":
            cli.check_postgresql_status()
        elif args.command == "postgres-info":
            cli.show_postgresql_info()
        else:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {args.command}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}")


if __name__ == "__main__":
    main()
